@page "/"
@using System.Globalization
@using Microsoft.AspNetCore.Components.QuickGrid
@using Blazor.Client.Services
@using Blazor.Client.Models
@using System.Text.Json
@implements IDisposable
@inject HttpClient HttpClient
@inject ILogger<Home> Logger
@inject MyStateService myState
@rendermode InteractiveServer



<QuickGrid Items="@people">
    <PropertyColumn Property="@(p => p.PersonId)" Sortable="true" />
    <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
    <PropertyColumn Property="@(p => p.PromotionDate)" Format="yyyy-MM-dd" Sortable="true" />
</QuickGrid>

<div class="container mt-3">
    <div class="list-group">
        @foreach (var message in myState.Messages)
        {
            <div class="list-group-item list-group-item-action flex-column align-items-start">
                <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1">@(message.userName ?? "Unknown User")</h5>
                    <small>@(message.Timestamp.ToString("g") ?? "Unknown time")</small>
                </div>
                <p class="mb-1">@(message.Text ?? "No message content")</p>
            </div>
        }
    </div>
</div>





@code {


    private record Person(int PersonId, string Name, DateOnly PromotionDate);
    public String responseText { get; set; }
    public void UpdateResponseText(string text)
    {
        responseText = text;
    }

    private IQueryable<Person> people = new[]
    {
        new Person(10895, "Jean Martin", new DateOnly(1985, 3, 16)),
        new Person(10944, "António Langa", new DateOnly(1991, 12, 1)),
        new Person(11203, "Julie Smith", new DateOnly(1958, 10, 10)),
        new Person(11205, "Nur Sari", new DateOnly(1922, 4, 27)),
        new Person(11898, "Jose Hernandez", new DateOnly(2011, 5, 3)),
        new Person(12130, "Kenji Sato", new DateOnly(2004, 1, 9)),
    }.AsQueryable();

    private System.Threading.Timer pollingTimer;
    //private List<Message> messages = new List<Message>();


    protected override void OnInitialized()
    {
        // Set up the timer to poll every 1000 milliseconds (1 second)
        pollingTimer = new System.Threading.Timer(async _ => await PollMessages(), null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        base.OnInitialized();
    }


    void MessageListChanged(ComponentBase sender, string message)
    {
        // Additional logic can be added here if needed
        StateHasChanged();
    }


    private async Task PollMessages()
    {
        try
        {
            // Fetch messages
            var fetchedMessages = await HttpClient.GetFromJsonAsync<List<ChatMessage>>("http://localhost:5000/Chatbot/message/get");

            // Process messages
            var systemMessages = fetchedMessages.Where(m => m.userName == "System").ToList();
            var otherMessages = fetchedMessages.Where(m => m.userName != "System").ToList();

            ChatMessage mostRecentSystemMessage = null;
            if (systemMessages.Any())
            {
                mostRecentSystemMessage = systemMessages.Aggregate((prev, current) =>
                    (prev.Timestamp > current.Timestamp) ? prev : current);
            }

            var combinedMessages = mostRecentSystemMessage != null ? otherMessages.Concat(new[] { mostRecentSystemMessage }) : otherMessages;
            myState.Messages = combinedMessages.ToList();
            StateHasChanged();
            // print the .Text of all myState.Messages elements
            foreach (var message in myState.Messages)
            {
                Console.WriteLine(message.Text);
            }
            // Update the state with the new messages

            // If you're using a more complex state management, dispatch the messages here
        }
        catch (Exception ex)
        {
            // Handle exceptions
        }
    }

    public void Dispose()
    {
        pollingTimer?.Dispose();
    }

}
